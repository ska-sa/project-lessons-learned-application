CREATE DATABASE PROJECT_LESSONDB
GO

Use PROJECT_LESSONDB
GO

-- Users table (combines User and Admin from ERD with role-based access)
CREATE TABLE USERS (
    USER_ID INT IDENTITY(1,1) PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    SURNAME VARCHAR(100) NOT NULL,
    EMAIL VARCHAR(100) UNIQUE NOT NULL,
    DATE_OF_BIRTH DATE,
    USERNAME VARCHAR(50) UNIQUE NOT NULL,
    PASSWORD_HASH VARCHAR(255) NOT NULL,
    PICTURE_URL VARCHAR(255),
    ROLE VARCHAR(20) NOT NULL CHECK (role IN ('admin', 'manager', 'user')),
    IS_ACTIVE BOOLEAN DEFAULT TRUE,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
GO

-- Projects table
CREATE TABLE PROJECTS (
    PROJECT_ID INT IDENTITY(1,1) PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    DESCRIPTION TEXT,
    START_DATE DATE NOT NULL,
    END_DATE DATE,
    STATUS VARCHAR(20) NOT NULL CHECK (status IN ('active', 'completed', 'on-hold')) DEFAULT 'active',
    RISK_LEVEL VARCHAR(10) CHECK (RISK_LEVEL IN ('low', 'medium', 'high')),
    CREATED_BY INT FOREIGN KEY REFERENCES USERS(USER_ID),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
GO
-- Lessons table
CREATE TABLE LESSONS (
    LESSONS_ID INT IDENTITY(1,1) PRIMARY KEY,
    TITTLE VARCHAR(200) NOT NULL,
    DESCRIPTION TEXT NOT NULL,
    ROOT_CAUSE TEXT,
    OUTCOME TEXT,
    IMPACT VARCHAR(10) NOT NULL CHECK (impact IN ('positive', 'negative', 'neutral')),
    STATUS VARCHAR(20) NOT NULL CHECK (status IN ('pending', 'approved', 'rejected')) DEFAULT 'pending',
    CATEGORY VARCHAR(50),
    TAGS VARCHAR(255),
    PROJECT_ID INT FOREIGN KEY REFERENCES PROJECTS(PROJECT_ID),
    CREATED_BY INT FOREIGN KEY REFERENCES USERS(USER_ID),
    APPRIVED_BY INT FOREIGN KEY REFERENCES USERS(USER_ID),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    APPROVED_AT TIMESTAMP
);
GO
-- Lesson comments
CREATE TABLE LESSON_COMMENTS (
    LESSON_COMMENTS_ID INT IDENTITY(1,1) PRIMARY KEY,
    LESSONS_ID INT NOT NULL FOREIGN KEY REFERENCES LESSONS(LESSONS_ID) ON DELETE CASCADE,
    USER_ID INT NOT NULL FOREIGN KEY REFERENCES USERS(USER_ID),
    COMMENT TEXT NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
GO
-- Lesson attachments
CREATE TABLE LESSON_ATTACHEMENTS (
    LESSON_ATTACHEMENTS_ID INT IDENTITY(1,1) PRIMARY KEY,
    LESSONS_ID INT NOT NULL FOREIGN KEY REFERENCES LESSONS(LESSONS_ID) ON DELETE CASCADE,
    FILE_NAME VARCHAR(255) NOT NULL,
    FILE_URL VARCHAR(255) NOT NULL,
    FILE_TYPE VARCHAR(50) NOT NULL,
    FILE_SIZE INTEGER,
    UPLOADED_BY INT FOREIGN KEY REFERENCES USERS(USER_ID),
    UPLOADED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
GO

-- Reports table
CREATE TABLE REPORTS (
    REPORTS_ID INT IDENTITY(1,1) PRIMARY KEY,
    NAME VARCHAR(100) NOT NULL,
    TYPE VARCHAR(50) NOT NULL,
    PARAMETERS JSONB,
    CREATED_BY INT FOREIGN KEY REFERENCES USERS(USER_ID),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
GO

-- Settings table
CREATE TABLE SETTINGS (
    SETTINGS_ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INT FOREIGN KEY REFERENCES USERS(USER_ID),
    NOTIFICATIONS_ENABLED BOOLEAN DEFAULT TRUE,
    NOTIFICATION_PREFERENCES JSONB,
    UI_CONFIGURATION JSONB,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    UPDATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
GO

-- Authentication logs
CREATE TABLE AUTH_LOGS (
    AUTH_LOGS_ID INT IDENTITY(1,1) PRIMARY KEY,
    USER_ID INTEGER REFERENCES USERS(USER_ID),
    ACTION VARCHAR(50) NOT NULL,
    IP_ADDRESS VARCHAR(50),
    USER_AGENT TEXT,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);